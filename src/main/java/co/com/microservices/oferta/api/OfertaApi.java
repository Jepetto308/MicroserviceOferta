/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.microservices.oferta.api;

import co.com.microservices.oferta.model.Oferta;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-14T10:21:40.463-05:00")

@Api(value = "oferta", description = "the oferta API")
public interface OfertaApi {

    @ApiOperation(value = "Add a new oferta to the store", nickname = "addOferta", notes = "", tags={ "MicroserviceOferta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/oferta",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> addOferta(@ApiParam(value = "oferta object that needs to be added to the store" ,required=true )  @Valid @RequestBody Oferta body);


    @ApiOperation(value = "Delete an existing oferta", nickname = "deleteOferta", notes = "", tags={ "MicroserviceOferta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Person not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/oferta",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<?> deleteOferta(@ApiParam(value = "oferta object that needs to be added to the store" ,required=true )  @Valid @RequestParam String idOferta);


    @ApiOperation(value = "Get all ofertas", nickname = "getAll", notes = "", response = Oferta.class, tags={ "MicroserviceOferta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Oferta.class),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/oferta",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getAll();


    @ApiOperation(value = "Update an existing oferta", nickname = "updateOferta", notes = "", tags={ "MicroserviceOferta", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Oferta not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/oferta",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<?> updateOferta(@ApiParam(value = "oferta object that needs to be added to the store" ,required=true )  @Valid @RequestBody Oferta body);

}
